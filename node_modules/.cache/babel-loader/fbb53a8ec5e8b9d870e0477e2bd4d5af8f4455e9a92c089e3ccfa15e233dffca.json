{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\e0509\\\\Desktop\\\\MedicalCenterProject\\\\client\\\\src\\\\testQueue.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QueueComponent = ({\n  match\n}) => {\n  _s();\n  const {\n    queueType\n  } = match.params;\n  const [queueData, setQueueData] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3001/main-table/${queueType}`);\n\n        // Check if the response data is an array\n        if (Array.isArray(response.data)) {\n          setQueueData(response.data);\n        } else {\n          throw new Error('Invalid data format received');\n        }\n      } catch (error) {\n        console.error('Error fetching queue data:', error);\n        setError(error); // Set the error state\n      }\n    };\n    fetchData();\n  }, [queueType]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error fetching data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [queueType, \" Queue\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: queueData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" - \", item.turnId]\n      }, item._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(QueueComponent, \"MTmeqQv1iegYf5LIXXKDuiyDDYE=\");\n_c = QueueComponent;\nconst TestQueue = () => {\n  const queueTypes = ['receptionQueue', 'ecgQueue', 'treatmentQueue', 'triageQueue', 'doctorQueue'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: queueTypes.map(queueType => /*#__PURE__*/_jsxDEV(QueueComponent, {\n      match: {\n        params: {\n          queueType\n        }\n      }\n    }, queueType, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c2 = TestQueue;\nexport default TestQueue;\nvar _c, _c2;\n$RefreshReg$(_c, \"QueueComponent\");\n$RefreshReg$(_c2, \"TestQueue\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","QueueComponent","match","_s","queueType","params","queueData","setQueueData","error","setError","fetchData","response","get","Array","isArray","data","Error","console","children","message","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","turnId","_id","_c","TestQueue","queueTypes","_c2","$RefreshReg$"],"sources":["C:/Users/e0509/Desktop/MedicalCenterProject/client/src/testQueue.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst QueueComponent = ({ match }) => {\r\n  const { queueType } = match.params;\r\n  const [queueData, setQueueData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:3001/main-table/${queueType}`);\r\n        \r\n        // Check if the response data is an array\r\n        if (Array.isArray(response.data)) {\r\n          setQueueData(response.data);\r\n        } else {\r\n          throw new Error('Invalid data format received');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching queue data:', error);\r\n        setError(error); // Set the error state\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [queueType]);\r\n\r\n  if (error) {\r\n    return <div>Error fetching data: {error.message}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{queueType} Queue</h1>\r\n      <ul>\r\n        {queueData.map((item) => (\r\n          <li key={item._id}>\r\n            {item.name} - {item.turnId}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TestQueue = () => {\r\n  const queueTypes = ['receptionQueue', 'ecgQueue', 'treatmentQueue', 'triageQueue', 'doctorQueue'];\r\n\r\n  return (\r\n    <div>\r\n      {queueTypes.map((queueType) => (\r\n        <QueueComponent key={queueType} match={{ params: { queueType } }} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestQueue;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}